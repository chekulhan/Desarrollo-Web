/*
bcrypt es un algoritmo de hashing dise√±ado para almacenar contrase√±as de forma segura. 
A diferencia de otros algoritmos de hashing, bcrypt incorpora un factor de coste que hace que sea m√°s lento y dif√≠cil de romper mediante ataques de fuerza bruta.
üîë ¬øQu√© es el Salto (Salt)?
El salto (salt) es una cadena aleatoria de caracteres que bcrypt genera y agrega a la contrase√±a antes de hacer el hashing. Esto asegura que incluso si dos personas tienen la misma contrase√±a, sus hashes ser√°n diferentes.

El salt es √∫nico para cada usuario.

A√±adir un salt hace que los hashes de contrase√±as sean √∫nicos, incluso si las contrase√±as son iguales.

üí£ ¬øQu√© son las Rondas (Rounds)?
Las rondas (rounds) son la cantidad de veces que bcrypt realiza el proceso de hashing. Cuantas m√°s rondas, m√°s lento ser√° el proceso de hashing. Esto hace que los ataques de fuerza bruta sean m√°s dif√≠ciles de ejecutar, ya que un atacante tendr√≠a que realizar muchas m√°s operaciones para descifrar las contrase√±as.

Menos rondas: R√°pido, pero m√°s vulnerable a ataques.

M√°s rondas: M√°s seguro, pero m√°s lento.

El n√∫mero de rondas se especifica mediante el factor de coste que le das a bcrypt. Generalmente se utiliza un n√∫mero entre 10 y 14, aunque puedes aumentar este n√∫mero seg√∫n el nivel de seguridad que necesites.
*/


import bcrypt, { hash } from 'bcrypt';


const simplePassword = 'mysecret123';

const hashPassword = async (password) => {

    const saltRounds = 10;
    const hashed = await bcrypt.hash(password, saltRounds);
    console.log("Hashed", hashed);
    return hashed;
}

// IIFE: Immediately Invoked Function Expression - con ESModules, ahora, no hace falta para ejecutar async/await
/*
(function() {
    // Function body
  })();

(() => {
  // Function body
})();

*/
/*
(async () => {
    const hash = await hashPassword(simplePassword);
    const hashed = await bcrypt.hash(simplePassword, 10);
    console.log("done", hashed);
  })();

  */


const abc = await bcrypt.hash(simplePassword, 10);
const match = await bcrypt.compare('mysecret123', abc);
console.log(match ? '‚úÖ Correct' : '‚ùå Incorrect');
